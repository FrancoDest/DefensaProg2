<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.AlmacenamientoUsuario">
            <summary>
            Clase AlmacenamientoUsuario. Se encarga de manejar todos los datos vinculados con los usuarios.
            </summary>
        </member>
        <member name="F:ClassLibrary.AlmacenamientoUsuario.ListaDeUsuarios">
            <summary>
            Almacenamiento de usuarios
            </summary>
        </member>
        <member name="F:ClassLibrary.AlmacenamientoUsuario.instance">
            <summary>
            Parte de singleton. Atributo donde se guarda la instancia del AlmacenamientoUsuario (o null si no fue creada).
            </summary>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.#ctor">
            <summary>
            Parte de singleton. Constructor llamado por el metodo Instance de crearse un AlmacenamientoUsuario.
            </summary>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.Instance">
            <summary>
            Singleton de AlmacenamientoUsuario. Si no existe una instancia de AlmacenamientoUsuario, crea una. Si ya existe la devuelve
            </summary>
            <returns> Instancia nueva de AlmacenamientoUsuario, o de darse el caso, una previamente creada </returns>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.Registrar(System.String,System.Int64,System.String)">
            <summary>
            Crea un nuevo perfil de usuario asignandole un numero de jugador.
            Si es el primer usuario creado le asigna el numero 1, de lo contrario le asigna el
            numero mas alto de un jugador existente +1,
            y luego crea un PerfilUsuario con los datos necesarios para agregarlo a la lista de usuarios.
            </summary>
            <param name="nombre"> nombre del usuario</param>
            <param name="id"> id proporcionada por el bot </param>
            <param name="contrasena"> contraseña </param>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.Remover(System.Int32)">
            <summary>
            Si el numero de usuarios pertenece a un PerfilUsuario existente
            en la lista de perfiles de AlmacenamientoUsuario, lo elimina de la misma.
            </summary>
            <param name="NumeroDeJugador"> numero del jugador a remover </param>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ObtenerPerfil(System.Int32)">
            <summary>
            Si el PerfilUsuario que contiene el numero de usuario ingresado
            se encuentra en la lista de perfiles de AlmacenamientoUsuario, este metodo devuelve su perfil.
            </summary>
            <param name="usuario"> numero del jugador </param>
            <returns> perfil de usuario </returns>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ObtenerTableroOponente(System.Int32)">
            <summary>
            Si el numero de jugador ingresado tiene una partida en juego,
            pide mostrar el tablero del oponente.
            </summary>
            <param name="jugador"> jugador en partida </param>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ObtenerTablero(System.Int32)">
            <summary>
            Si el numero de jugador ingresado tiene una partida en juego,
            pide mostrar su propio tablero.
            </summary>
            <param name="jugador"> jugador en partida </param>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ObtenerHistorialPersonal(System.Int32)">
            <summary>
            Si el numero pertenece a un PerfilUsuario en la lista de perfiles de AlmacenamientoUsuario
            pide mostrar el HistorialPersonal de todas las partidas jugadas de este perfil.
            </summary>
            <param name="numerodejugador"> historial que se quiere ver</param>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ObtenerRanking">
            <summary>
            Realiza una lista de PerfilUsuario ordenados por cantidad de partidas ganadas,
            y le pide a la retorna.
            </summary>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ExisteUsuario(System.Int64)">
            <summary>
            Se fija si un usuario existe o no
            </summary>
            <param name="iDdelUsuario"> ID del usuario </param>
            <returns> devuelve true de existir el usuario, y de lo contrario false </returns>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ConversorIDaNum(System.Int64)">
            <summary>
            Convierte la ID de un usuario a su respectivo numero de jugador
            </summary>
            <param name="iDdelUsuario"> ID del usuario</param>
            <returns> numero de jugador del usuario </returns>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.ConversorNumaID(System.Int32)">
            <summary>
            Convierte el numero de jugador de un usuario a su respectiva ID
            </summary>
            <param name="numdelUsuario"> numero del jugador </param>
            <returns> ID del jugador </returns>
        </member>
        <member name="M:ClassLibrary.AlmacenamientoUsuario.InicioSesion(System.Int32,System.String,System.String)">
            <summary>
            Se fija si un usuario existe, y de existir devuelve true
            </summary>
            <param name="numeroDeJugador"></param>
            <param name="nombre"></param>
            <param name="contrasena"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.DatosdePartida">
            <summary>
            Clase encargada de almacenar los datos referentes al acabar una partida.
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Tableros">
            <summary>
            Lugar donde se almacenan los tableros.
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Tamano">
            <summary>
            Tamaño de las matrices de la partida
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Jugadores">
            <summary>
            Lugar donde se almacenan los jugadores.
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Tiradas">
            <summary>
            Representa el numero de Tiradas que hubo en la partida.
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Ganador">
            <summary>
            El int es el número de jugador del perfil de usuario perteneciente al ganador.
            </summary>
        </member>
        <member name="F:ClassLibrary.DatosdePartida.Perdedor">
            <summary>
            El int es el número de jugador del perfil de usuario perteneciente al perdedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.DatosdePartida.#ctor(ClassLibrary.Tablero[],System.Int32[])">
            <summary>
            Metodo encargado de almacenar los datos.
            </summary>
            <param name="tablerosParaAgregar"></param>
            <param name="jugadas"></param>
        </member>
        <member name="M:ClassLibrary.DatosdePartida.almacenarTableros(ClassLibrary.Tablero[])">
            <summary>
            Metodo encargado de almacenar un tablero
            </summary>
            <param name="tablerosParaAgregar"></param>
        </member>
        <member name="M:ClassLibrary.DatosdePartida.almacenarJugador(System.Int32)">
            <summary>
            Metodo encargado de almacenar un jugador
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="T:ClassLibrary.Emparejamiento">
            <summary>
            Esta clase empareja a dos jugadores en un int[,] para poder crear una partida.
            Hay dos colas de espera existentes existentes en la espera de partida aleatoria, una para el modo normal y otra para el modo rapido.
            </summary>
        </member>
        <member name="F:ClassLibrary.Emparejamiento.ColaEmparejamientosN">
            <summary>
            Cola de emparejamiento (modo normal)
            </summary>
        </member>
        <member name="F:ClassLibrary.Emparejamiento.ColaEmparejamientosR">
            <summary>
            Cola de emparejamiento (modo rapido)
            </summary>
        </member>
        <member name="F:ClassLibrary.Emparejamiento.instance">
            <summary>
            Parte de singleton. Atributo donde se guarda la instancia del
            Emparejamiento (o null si no fue creada).
            </summary>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.#ctor">
            <summary>
            Parte de singleton. Constructor llamado por el metodo Instance de crearse un Emparejamiento.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.Instance">
            <summary>
            Singleton de Emparejamiento. Si no existe una instancia
            de Emparejamiento, crea una. Si ya existe la devuelve
            </summary>
            <returns> Instancia nueva de Emparejamiento,
            o de darse el caso, una previamente creada </returns>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.RemoverListaEspera(System.Int32)">
            <summary>
            Remueve usuario de cola de emparejamiento
            </summary>
            <param name="usuario"> usuario a remover </param>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.EmparejarAleatorio(System.Int32,System.Int32)">
            <summary>
            Empareja a dos jugadores, el jugador que busca partida y uno aleatorio (determinado por la cola)
            </summary>
            <param name="modo"> modo de juego elegido </param>
            <param name="jugador"> jugador que busca emparejamiento </param>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.EmparejarAmigos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Empareja a dos usuarios especificos
            </summary>
            <param name="modo"> modo de juego elegido </param>
            <param name="jugador1"> jugador 1 </param>
            <param name="jugador2"> jugador 2 </param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.AnadirAmigosAEspera(System.Int64,System.Int64)">
            <summary>
            Añade a los jugadores como tupla a una
            lista de espera de confirmacion para partidas amistosas
            </summary>
            <param name="anfitrion"> jugador que invita </param>
            <param name="invitado"> jugador invitado </param>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.RemoverAmigosDeEspera(System.Int64,System.Int64)">
            <summary>
            Remueve a los jugadores de la
            lista de espera de confirmacion para partidas amistosas
            </summary>
            <param name="anfitrion"> jugador que invita </param>
            <param name="invitado"> jugador invitado </param>
        </member>
        <member name="M:ClassLibrary.Emparejamiento.VerListaEsperaAmigos(System.Int64)">
            <summary>
            Se fija quien es el rival de un usuario en el contexto de una partida amistosa
            </summary>
            <param name="invitado"> jugador invitado </param>
            <returns> pareja de jugadores (tupla) </returns>
        </member>
        <member name="T:ClassLibrary.Historial">
            <summary>
            Esta clase se encarga de añadir las partidas que se jugaron a una lista,
            con el objetivo de mantener un registro de las partidas jugadas.
            </summary>
        </member>
        <member name="F:ClassLibrary.Historial.Partidas">
            <summary>
            Lista de DatosdePartida
            </summary>
        </member>
        <member name="F:ClassLibrary.Historial.instance">
            <summary>
            Parte de singleton. Atributo donde se guarda la instancia del Historial (o null si no fue creada).
            </summary>
        </member>
        <member name="M:ClassLibrary.Historial.#ctor">
            <summary>
            Parte de singleton. Constructor llamado por el metodo Instance de crearse un Historial.
            </summary>
        </member>
        <member name="M:ClassLibrary.Historial.Instance">
            <summary>
            Singleton de Historial. Si no existe una instancia de Historial, crea una. Si ya existe la devuelve
            </summary>
            <returns> Instancia nueva de Historial, o de darse el caso, una previamente creada </returns>
        </member>
        <member name="M:ClassLibrary.Historial.AlmacenarPartida(ClassLibrary.DatosdePartida)">
            <summary>
            Almacena la partida en el historial general y los historiales personales de los jugadores.
            </summary>
            <param name="partida"> partida a almacenar </param>
        </member>
        <member name="T:ClassLibrary.PartidasEnJuego">
            <summary>
            Almacena la Partida mientras esta en curso
            </summary>
        </member>
        <member name="F:ClassLibrary.PartidasEnJuego.partidas">
            <summary>
            Lista de partidas en juego
            </summary>
        </member>
        <member name="F:ClassLibrary.PartidasEnJuego.instance">
            <summary>
            Parte de singleton. Atributo donde se guarda la instancia de PartidasEnJuego (o null si no fue creada).
            </summary>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.#ctor">
            <summary>
            Parte de singleton. Constructor llamado por el metodo Instance de crearse
            una instancia de PartidasEnJuego.
            </summary>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.Instance">
            <summary>
            Singleton de PartidasEnJuego.
            Si no existe una instancia de PartidasEnJuego, crea una. Si ya existe la devuelve
            </summary>
            <returns> Instancia nueva de PartidasEnJuego, o de darse el caso, una previamente creada </returns>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.AlmacenarPartida(ClassLibrary.Partida)">
            <summary>
            Agrega una Partida a la lista.
            </summary>
            <param name="partida"></param>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.RemoverPartida(ClassLibrary.Partida)">
            <summary>
            Elimina una Partida de la lista.
            </summary>
            <param name="partida"></param>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.ObtenerPartida(System.Int32)">
            <summary>
            Metodo utilizado para obtener la logica de partida,
            buscandola externamente en esta clase limitandola 
            para que no se pueda acceder a ella desde un 
            usuario que no este jugando dicha partida.
            </summary>
            <param name="numeroDeJugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.EstaElJugadorEnPartida(System.Int32)">
            <summary>
            Metodo creado para poder verificicar si 
            un jugador esta en alguna partida en curso.
            </summary>
            <param name="numeroDeJugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.ObtenerNumOponente(System.Int32)">
            <summary>
            Metodo creado con el objetivo de obtener el NumeroDeJugador del oponente
            de un jugador que consulta.
            </summary>
            <param name="numeroDeJugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PartidasEnJuego.EstaTerminada(System.Int32)">
            <summary>
            Verifica si la partida del jugador esta terminada
            </summary>
            <param name="numeroDeJugador"> Jugador en partida </param>
            <returns> true si la partida esta finalizada y false en caso contrario </returns>
        </member>
        <member name="T:ClassLibrary.Barco">
            <summary>
            Clase encargada de guardar las caracteristicas 
            basicas de un barco y administrarlos.
            </summary>
        </member>
        <member name="F:ClassLibrary.Barco.partes">
            <summary>
            Atributo para ver las partes del barco que estan enteras.
            </summary>
        </member>
        <member name="F:ClassLibrary.Barco.casillasSinHundir">
            <summary>
            Atributo para poder ver las coordenadas ocupadas por el barco.
            </summary>
        </member>
        <member name="F:ClassLibrary.Barco.casillasOcupadas">
            <summary>
            Atributo para poder ver las coordenadas ocupadas por el barco.
            </summary>
        </member>
        <member name="F:ClassLibrary.Barco.orientacion">
            <summary>
            Atributo Encargado de guardar la orientacion del barco para utilizarlo en los diferentes metodos.
            </summary>
        </member>
        <member name="M:ClassLibrary.Barco.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Constructor de la clase barco.
            </summary>
            <param name="filaInicio"></param>
            <param name="columnaInicio"></param>
            <param name="filaFinal"></param>
            <param name="columnaFinal"></param>
            <param name="coordenadasAUtilizar"></param>
        </member>
        <member name="M:ClassLibrary.Barco.ObtenerPartesDeBarcoHundido">
            <summary>
            Metodo utilizado por tablero para obtener los lugares ocupados por el barco.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Barco.hundido">
            <summary>
            Metodo encargado de verificar si a un barco 
            no le quedan partes sin dañar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Barco.ParteDelBarco(System.Int32,System.Int32)">
            <summary>
            Metodo responsable de ver si una casilla es parte del barco.
            </summary>
            <param name="filaAtaque"></param>
            <param name="columnaAtaque"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Barco.Danar(System.Int32,System.Int32)">
            <summary>
            Metodo Utilizado por el tablero para Dañar a un barco.
            </summary>
            <param name="filaAtaque"></param>
            <param name="columnaAtaque"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.SingletonBot">
            <summary>
            Un programa que implementa un bot de Telegram.
            </summary>
        </member>
        <member name="F:ClassLibrary.SingletonBot.instance">
            <summary>
            Parte de singleton. Atributo donde se guarda la instancia del AlmacenamientoUsuario (o null si no fue creada).
            </summary>
        </member>
        <member name="M:ClassLibrary.SingletonBot.#ctor">
            <summary>
            Parte de singleton. Constructor llamado por el metodo Instance de crearse un AlmacenamientoUsuario.
            </summary>
        </member>
        <member name="M:ClassLibrary.SingletonBot.Instance">
            <summary>
            Singleton de AlmacenamientoUsuario. Si no existe una instancia de AlmacenamientoUsuario, crea una. Si ya existe la devuelve
            </summary>
            <returns> Instancia nueva de AlmacenamientoUsuario, o de darse el caso, una previamente creada </returns>
        </member>
        <member name="T:ClassLibrary.EstadosUsuarios">
            <summary>
            Clase encargada de manejar los estados de los diferentes usuarios
            </summary>
        </member>
        <member name="T:ClassLibrary.Planificador">
            <summary>
            Clase Planificador. Se encarga de manejar distintos aspectos del programa,
            como los usuarios y el historial.
            Sera cambiada en gran parte por los handlers.
            </summary>
        </member>
        <member name="M:ClassLibrary.Planificador.Registrar(System.String,System.Int64,System.String)">
            <summary>
            Se comunica con AlmacenamientoUsuario para registrar un nuevo jugador,
            recibe el numero de usuario y se lo muestra al jugador.
            </summary>
            <param name="nombre"> nombre del usuario</param>
            <param name="id"> id proporcionada por el bot </param>
            <param name="contrasena"> contraseña </param>
        </member>
        <member name="M:ClassLibrary.Planificador.IniciarSesion(System.Int32,System.String,System.String)">
            <summary>
            Esta clase permite que un usuario pueda iniciar sesion
            </summary>
            <param name="numeroDeJugador"> jugador que quiere iniciar sesion </param>
            <param name="nombre"> nombre del jugador </param>
            <param name="contrasena"> contraseña del jugador </param>
            <returns> Devuelve true si el inicio de sesion se efectuo correctamente </returns>
        </member>
        <member name="M:ClassLibrary.Planificador.Remover(System.Int32)">
            <summary>
            Le pide a AlmacenamientoUsuario eliminar un NumeroDeJugador de la lista
            Le comunica al jugador la accion realizada
            </summary>
            <param name="NumeroDeJugador"> numero del jugador a remover</param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerPerfil(System.Int32)">
            <summary>
            Permite visualizar el perfil de un usuario.
            </summary>
            <param name="usuario"> jugador del cual se quiere ver el perfil </param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerTableroOponente(System.Int32)">
            <summary>
            Si el numero de jugador ingresado tiene una partida en juego,
            pide mostrar el tablero del oponente.
            </summary>
            <param name="jugadorOponente"> jugador en partida </param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerTablero(System.Int32)">
            <summary>
            Si el numero de jugador ingresado tiene una partida en juego,
            pide mostrar su propio tablero.
            </summary>
            <param name="jugador"> jugador en partida </param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerHistorial">
            <summary>
            Pide mostrar el historial general de todos las partidas jugadas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Planificador.VerHistorialPersonal(System.Int32)">
            <summary>
            Si el numero ingresado por parametro pertenece a un PerfilUsuario
            en la lista de perfiles de Planificador,
            pide mostrar el HistorialPersonal de partidas jugadas de este perfil.
            </summary>
            <param name="numerodejugador"> historial que se quiere ver</param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerRanking">
            <summary>
            Llama a ObtenerRanking de la clase AlmacenamientoUsuario y le pide a la impresora que lo muestre.
            </summary>
        </member>
        <member name="M:ClassLibrary.Planificador.CrearPartida(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Crea una Partida, asignandole un tamaño, un modo
            y los dos numeros de jugador de quienes quieren comenzar una partida.
            </summary>
            <param name="tamano"> tamaño del tablero </param>
            <param name="modo"> modo de juego a jugar </param>
            <param name="jugadores"> jugadores </param>
        </member>
        <member name="M:ClassLibrary.Planificador.Emparejar(System.Int32,System.Int32,System.Int32)">
            <summary>
            Empareja a dos jugadores, siendo uno de ellos el jugador que busca partida,
            y el otro un jugador que este esperando por una partida.
            </summary>
            <param name="modo"> modo elegido </param>
            <param name="jugador"> jugador que busca partida </param>
            <param name="tamano"> tamaño del tablero </param>
        </member>
        <member name="M:ClassLibrary.Planificador.EmparejarAmigos(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Empareja a dos jugadores por sus numeros de jugador.
            </summary>
            <param name="modo"> modo de juego elegido </param>
            <param name="jugador1"> jugador 1 </param>
            <param name="jugador2"> jugador 2 </param>
            <param name="tamano"> tamaño del tablero </param>
        </member>
        <member name="M:ClassLibrary.Planificador.anadirListaEsperaAmigos(System.Int64,System.Int64)">
            <summary>
            Añade a los jugadores como tupla a una
            lista de espera de confirmacion para partidas amistosas
            </summary>
            <param name="jugador"> jugador que invita </param>
            <param name="invitado"> jugador invitado </param>
        </member>
        <member name="M:ClassLibrary.Planificador.VerListaEsperaAmigos(System.Int64)">
            <summary>
            Se fija quien es el rival de un usuario en el contexto de una partida amistosa
            </summary>
            <param name="jugador"> jugador invitado </param>
            <returns> pareja de jugadores (tupla) </returns>
        </member>
        <member name="M:ClassLibrary.Planificador.removerListaEspera(System.Int32)">
            <summary>
            Pide a Emparejamiento remover un usuario de la lista de espera y manda el mensaje correspondiente a impresora.
            </summary>
            <param name="usuario"> usuario a remover </param>
        </member>
        <member name="M:ClassLibrary.Planificador.Posicionar(System.String,System.String,System.Int32)">
            <summary>
            Metodo para posicionar barcos
            </summary>
            <param name="inicio"> coordenada inicial del barco </param>
            <param name="final"> coordenada final del barco </param>
            <param name="jugador"> jugador que posiciona </param>
            <returns> mensaje a devolver </returns>
        </member>
        <member name="M:ClassLibrary.Planificador.Atacar(System.String,System.Int32)">
            <summary>
            Permite al jugador atacar
            </summary>
            <param name="coordenada"></param>
            <param name="atacante"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Planificador.Rendirse(System.Int32)">
            <summary>
            Metodo para rendirse
            </summary>
            <param name="jugador"> jugador que quiere rendirse </param>
        </member>
        <member name="M:ClassLibrary.Planificador.PosicionamientoFinalizado(System.Int32)">
            <summary>
            Metodo utilizado para ver si la etapa de posicionamiento de
            un jugador en la partida que esta jugando a finalizado. 
            </summary>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Planificador.ObtenerNumOponente(System.Int32)">
            <summary>
            Responsable de enviar el numero de jugador de una partida.
            El cual consulta el numero del oponente. Para luego enviarle mensajes en los handlers
            </summary>
            <param name="JugadorQueConsulta"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.TraductorDeCoordenadas">
            <summary>
            Esta clase se encarga de traducir las coordenadas ingresadas por el usuario a una forma en que el programa lo entienda
            </summary>
        </member>
        <member name="M:ClassLibrary.TraductorDeCoordenadas.Traducir(System.String)">
            <summary>
            Transforma las coordenadas introducidas por el usuario en un int[,]
            </summary>
            <param name="coordenada"></param>
            <returns> Devuelve la coordenada en un arreglo de int. De ser invalida, devuelve null </returns>
        </member>
        <member name="T:ClassLibrary.ComenzarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Comenzar".
            </summary>
        </member>
        <member name="M:ClassLibrary.ComenzarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Comenzar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.ComenzarHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Comenzar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.InicioSesionHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "InicioSesion".
            </summary>
        </member>
        <member name="M:ClassLibrary.InicioSesionHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "InicioSesion".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.InicioSesionHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje.
            </summary>
            <param name="message"> mensaje a procesar </param>
            <returns> Devuelve base.CanHandler si el usuario tiene estado,
            de lo contrario devuelve false </returns>
        </member>
        <member name="M:ClassLibrary.InicioSesionHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "InicioSesion" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RegistrarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Registrar".
            </summary>
        </member>
        <member name="F:ClassLibrary.RegistrarHandler.HistoriaLocal">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistrarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Registrar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RegistrarHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje.
            </summary>
            <param name="message"> mensaje a procesar </param>
            <returns> Devuelve base.CanHandler si el usuario tiene estado,
            de lo contrario devuelve false </returns>
        </member>
        <member name="M:ClassLibrary.RegistrarHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AyudaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Ayuda".
            </summary>
        </member>
        <member name="M:ClassLibrary.AyudaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Ayuda".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.AyudaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Ayuda" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscarPartidaAmistosaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "BuscarPartidaAmistosa".
            </summary>
        </member>
        <member name="F:ClassLibrary.BuscarPartidaAmistosaHandler.HistoriaLocal">
            <summary>
            Diccionario que almacena los mensajes ingresados por cada uno
            de los jugadores que se encuentran en esta etapa.
            </summary>
            <typeparam name="long"> Id del jugador </typeparam>
            <typeparam name="string[][]"> ultimo mensaje ingresado </typeparam>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaAmistosaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "BuscarPartidaAmistosa".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaAmistosaHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje.
            </summary>
            <param name="message"> mensaje a procesar </param>
            <returns> Devuelve base.CanHandler si el usuario tiene estado,
            de lo contrario devuelve false </returns>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaAmistosaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "BuscarPartidaAmistosa" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscarPartidaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "BuscarPartida".
            </summary>
        </member>
        <member name="F:ClassLibrary.BuscarPartidaHandler.HistoriaLocal">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "BuscarPartida".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje.
            </summary>
            <param name="message"> mensaje a procesar </param>
            <returns> Devuelve base.CanHandler si el usuario tiene estado,
            de lo contrario devuelve false </returns>
        </member>
        <member name="M:ClassLibrary.BuscarPartidaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "BuscarPartida" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.ConfirmarPartidaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ConfirmarPartida".
            </summary>
        </member>
        <member name="F:ClassLibrary.ConfirmarPartidaHandler.HistoriaLocal">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConfirmarPartidaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "ConfirmarPartida".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.ConfirmarPartidaHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje.
            </summary>
            <param name="message"> mensaje a procesar </param>
            <returns> Devuelve base.CanHandler si el usuario tiene estado,
            de lo contrario devuelve false </returns>
        </member>
        <member name="M:ClassLibrary.ConfirmarPartidaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "ConfirmarPartida" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.MenuHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Menu".
            </summary>
        </member>
        <member name="M:ClassLibrary.MenuHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Menu".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.MenuHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Menu" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverUsuarioHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Remover".
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverUsuarioHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Remover".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RemoverUsuarioHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Remover" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.SalirEmparejamientoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "SalirEmparejamiento".
            </summary>
        </member>
        <member name="M:ClassLibrary.SalirEmparejamientoHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "SalirEmparejamiento".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.SalirEmparejamientoHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "SalirEmparejamiento" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerHistorialHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "VerHistorial".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerHistorialHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "VerHistorial".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.VerHistorialHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "VerHistorial" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerHistorialPersonalHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "VerHistorialPersonal".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerHistorialPersonalHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "VerHistorialPersonal".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.VerHistorialPersonalHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "VerHistorialPersonal" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerPerfilHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "VerPerfil".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerPerfilHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "VerPerfil".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.VerPerfilHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "VerPerfil" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerRankingHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "VerRanking".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerRankingHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "VerRanking".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.VerRankingHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "VerRanking" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.PosicionarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "VerHistorialPersonal".
            </summary>
        </member>
        <member name="F:ClassLibrary.PosicionarHandler.EstadoLocal">
            <summary>
            Contiene como key un long el cual es ocupado por los id de los distintos jugadores.
            El array de string se utiliza para poder ver los estados y 
            guardar informacion al cambiar el estado interno.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PosicionarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Menu".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.PosicionarHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Cambio el CanHandle que herede para poder utilizar el estado interno del handler.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PosicionarHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Menu" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RendirseHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Rendirse".
            </summary>
        </member>
        <member name="M:ClassLibrary.RendirseHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Remover".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RendirseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Remover" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AtacarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Atacar".
            </summary>
        </member>
        <member name="F:ClassLibrary.AtacarHandler.EstadoLocal">
            <summary>
            Contiene como key un long el cual es ocupado por los id de los distintos jugadores.
            El array de string se utiliza para poder ver los estados y 
            guardar informacion al cambiar el estado interno.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AtacarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>. Esta clase procesa el mensaje "Atacar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.AtacarHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Cambio el CanHandle que herede para poder utilizar el estado interno del handler.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AtacarHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "Menu" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(System.String[],ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ClassLibrary.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
            </summary>
        </member>
        <member name="P:ClassLibrary.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ClassLibrary.IImprimirTablero">
            <summary>
            Para evitar tener que preguntar si mostrar el tablero como el propio o el del oponente
            el código que varía según el destino se encuentra en diferentes clases que implementan esta interfaz.
            Implementando polimorfismo
            </summary>
        </member>
        <member name="M:ClassLibrary.IImprimirTablero.ImprimirTablero(ClassLibrary.Tablero)">
            <summary>
            Esta operación se encarga de crear un string que contiene el tablero listo para mostrarse.
            </summary>
            <param name="tablero"> El tablero que deseo se vuelva una string </param>
        </member>
        <member name="T:ClassLibrary.ImprimirTableroOponente">
            <summary>
            Envia a los handlers a modo de string el tablero implementando la interfaz IImprimirTablero con una operación polimórfica.
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImprimirTableroOponente.ImprimirTablero(ClassLibrary.Tablero)">
            <summary>
            Con este método se forma un string el tablero ingresado como parámetro agregándole índices de coordenadas.
            Se muestra el tablero ocultando los barcos aun no tocados por el oponente.
            </summary>
            <param name="tablero"> el tablero que volver string </param>
        </member>
        <member name="M:ClassLibrary.ImprimirTableroOponente.ayudanteDeTiro(System.Char[0:,0:])">
            <summary>
            Cuando un barco es atacado señaliza donde se pueden encontrar los otros puntos del barco
            </summary>
            <param name="matriz"> matriz del tablero que quiero señalizar </param>
        </member>
        <member name="T:ClassLibrary.ImprimirTableroPropio">
            <summary>
            Envia a los handlers a modo de string el tablero implementando la interfaz IImprimirTablero con una operación polimórfica.
            </summary>
        </member>
        <member name="M:ClassLibrary.ImprimirTableroPropio.ImprimirTablero(ClassLibrary.Tablero)">
            <summary>
            Con este método se forma un string el tablero ingresado como parámetro agregándole índices de coordenadas.
            Se muestra el tablero sin ocultar nada de su contenido
            </summary>
            <param name="tablero"> el tablero que volver string </param>
        </member>
        <member name="T:ClassLibrary.Mensajes">
            <summary>
            Envia a los handlers a modo de string todo lo que desee imprimir.
            </summary>
        </member>
        <member name="M:ClassLibrary.Mensajes.ImprimirPerfilUsuario(ClassLibrary.PerfilUsuario)">
            <summary>
            Este metodo forma un string con los datos publicos de los usuarios, 
            los cuales son: Nombre, Número de Jugador y las cantidades de 
            partidas ganadas y partidas perdidas que el usuario tenga.
            </summary>
            <param name="perfil"></param>
        </member>
        <member name="M:ClassLibrary.Mensajes.ImprimirHistorial(System.Collections.Generic.List{ClassLibrary.DatosdePartida})">
            <summary>
            Este método se encarga de crear un string que contenga el historial de todas las partidas en la lista de partidas ingresada como parametro.
            </summary>
            <param name="partidas"></param>
        </member>
        <member name="M:ClassLibrary.Mensajes.ImprimirRanking(System.Collections.Generic.List{ClassLibrary.PerfilUsuario})">
            <summary>
            Con esto método se crea un string que contiene el ranking, en el que los perfiles tienen posiciones dentro de este, los perfiles
            son ordenados según las batallas ganadas que los usuarios tengan.
            </summary>
        </member>
        <member name="T:ClassLibrary.Partida">
            <summary>
            Clase mediadora de la parte logica de la partida, se comunica con clases externas 
            y Logica. Sus responsabilidades son, Hacer un control de los ataques, de las pociciones de barco 
            y crear los mensajes de respuesta de estas acciones
            </summary>
        </member>
        <member name="F:ClassLibrary.Partida.posicionamientoTerminado">
            <summary>
            Variable encargada de controlar si se puede empezar a atacar (no se puede posicionar mas).
            /// </summary>
        </member>
        <member name="F:ClassLibrary.Partida.tableros">
            <summary>
            Array encargado de guardar los 2 tableros necesarios para una partida.
            </summary>
        </member>
        <member name="F:ClassLibrary.Partida.jugadores">
            <summary>
            Almacena los int caracteristicos de cada jugador
            </summary>
        </member>
        <member name="P:ClassLibrary.Partida.Jugadores">
            <summary>
            Copia publica de jugadores, utilizado para respetar encapsulamiento.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.Partida.tiradas">
            <summary>
            Cantidad de ataques hechos por cada jugador
            </summary>
        </member>
        <member name="F:ClassLibrary.Partida.cantidadDeBarcosParaPosicionar">
            <summary>
            Simboliza la cantidad de barcos que quedan para ubicar
            </summary>
        </member>
        <member name="M:ClassLibrary.Partida.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
             Constructor de la clase Partida.
            </summary>
            <param name="tamano"></param>
            <param name="jugador1"></param>
            <param name="jugador2"></param>
        </member>
        <member name="M:ClassLibrary.Partida.Finalizar">
            <summary>
            Metodo llamado para finalizar, guarda los datos mas importantes de 
            la partida en la clase DatosDePartida
            </summary>
        </member>
        <member name="M:ClassLibrary.Partida.Atacar(System.String,System.Int32)">
            <summary>
            Metodo encargado de ver si un ataque es posible y devolver su mensaje de respuesta.
            </summary>
            <param name="objetivo"></param>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.respuestaDeAtaque(System.Char)">
            <summary>
            Metodo encargado de formular los mensajes que se obtienen al atacar
            </summary>
            <param name="EstadoDeLaCasilla"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.AgregarBarco(System.String,System.String,System.Int32)">
            <summary>
            Metodo encargado de añadir los barcos
            </summary>
            <param name="coordenadaUno"></param>
            <param name="coordenadaDos"></param>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.ordenadorDeCoordenadas(System.Int32[],System.Int32[])">
            <summary>
            Metodo utilizado para organizar las coordenadas, para que sea lo mismo decir A1 a A5 que A5 a A1
            </summary>
            <param name="coordenada1"></param>
            <param name="coordenada2"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.largoDeBarcos(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Metodo encargado de obtener el largo de los barcos.
            </summary>
            <param name="filainicio"></param>
            <param name="columnainicio"></param>
            <param name="filafinal"></param>
            <param name="columnafinal"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.Rendirse(System.Int32)">
            <summary>
            Metodo encargado de la funcionalidad de rendirse.
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="M:ClassLibrary.Partida.VerTablero(System.Int32)">
            <summary>
            Metodo para ver el tablero propio por cada jugador.
            </summary>
            <param name="jugador"> numeroDeJugador del jugador que deseo el tablero </param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.PosicionamientoFinalizado(System.Int32)">
            <summary>
            Metodo Utilizado para ver si la etapa de posicionamiento de un jugador a finalizado
            desde otra clase.
            </summary>
            <param name="jugadorQueConsulta"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Partida.PartidaTerminada">
            <summary>
            Se encarga de finalizar la partida y devuelve un bool
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.PartidaRapida">
            <summary>
            Tablero de modo rapido creado en caso de diseñar dicho modo.
            </summary>
        </member>
        <member name="F:ClassLibrary.PartidaRapida.Segundastiradas">
            <summary>
            Atributo con el contador del segundo ataque de cada personaje.
            </summary>
        </member>
        <member name="M:ClassLibrary.PartidaRapida.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            En este contructor se asigna el tamaño de la matriz, se crea la misma y se asigna el dueño del Tablero.
            </summary>
            <param name="tamano"></param>
            <param name="jugador1"></param>
            <param name="jugador2"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PartidaRapida.Atacar(System.String,System.Int32)">
            <summary>
            Metodo encargado de llamar al metodo Atacar de Logica de Tablero se cambia ya que se debe controlar
            que un jugador ejecute su segundo tiro antes de que ataque su oponente.
            </summary>
            <param name="objetivo"></param>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.PerfilUsuario">
            <summary>
            Esta clase almacena el perfil de un usuario.
            Implementa la interfaz ICloneable para poder crear una copia superficial de un perfil. 
            Metodos publicos para poder serializar
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.Nombre">
            <summary>
            Nombre del jugador
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.ID">
            <summary>
            Identificación del jugador otorgada por el bot
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.Contrasena">
            <summary>
            Contraseña del usuario
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.NumeroDeJugador">
            <summary>
            Identificación numerica del jugador
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.Ganadas">
            <summary>
            Cantidad de partidas ganadas
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.Perdidas">
            <summary>
            Cantidad de partidas perdidas
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilUsuario.HistorialPersonal">
            <summary>
            historial del usuario en concreto
            </summary>
        </member>
        <member name="M:ClassLibrary.PerfilUsuario.Clone">
            <summary>
            Metodo de la interfaz ICloneable para crear un clon
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PerfilUsuario.#ctor(System.String,System.Int64,System.String,System.Int32)">
            <summary>
            Constructor del perfil de usuario.
            </summary>
            <param name="nombre"></param>
            <param name="ID"></param>
            <param name="contrasena"></param>
            <param name="numeroDeJugador"></param>
        </member>
        <member name="M:ClassLibrary.PerfilUsuario.AgregarAlHistorial(ClassLibrary.DatosdePartida)">
            <summary>
            Añade partidas al historial personal del usuario
            </summary>
            <param name="partida"> Partida a añadir </param>
        </member>
        <member name="M:ClassLibrary.PerfilUsuario.VerPerfil">
            <summary>
            Devuelve el perfil
            </summary>
            <returns> Devuelve el Perfil del usuario </returns>
        </member>
        <member name="M:ClassLibrary.PerfilUsuario.ObtenerHistorialPersonal">
            <summary>
            Devuelve una copia del historial personal
            </summary>
            <returns> Devuelve una lista con todos los datos de partida del perfil</returns>
        </member>
        <member name="T:ClassLibrary.Tablero">
            <summary>
            Clase encargada de manejar el espacio de juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Tablero.Tamano">
            <summary>
            Este atributo sirve para saber el tamaño de la matriz sin tener que recurrir a metodos que midan su tamaño
            </summary>
        </member>
        <member name="F:ClassLibrary.Tablero.matriz">
            <summary>
            Este ArrayList de char es donde esta contenido una gran parte de los datos del juego (contiene el tablero).
            </summary>
        </member>
        <member name="F:ClassLibrary.Tablero.terminado">
            <summary>
            Este atributo se encarga de mostrar el estado terminado de la partida, normalmente esta en false.
            </summary>
        </member>
        <member name="F:ClassLibrary.Tablero.barcos">
            <summary>
            Lista encargada de guardar los barcos enteros que existen en el tablero.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Tablero.DuenodelTablero">
            <summary>
            En este atributo se ve el numero de jugador de quien es el dueño del tablero, osea el que puede ver la informacion de los barcos intactos principalmente.
            </summary>
        </member>
        <member name="F:ClassLibrary.Tablero.Ganada">
            <summary>
            Variable que facilita saber si el dueño del tablero fue quien gano la partida.
            </summary>
        </member>
        <member name="F:ClassLibrary.Tablero.CantidadDeBarcosPosicionados">
            <summary>
            Todas las coordenadas donde hay barcos
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Tablero.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor de tableros, crea una matriz en base al tamaño que le diga quien llame al metodo
            </summary>
            <param name="tamano"> tamaño que sera el tablero </param>
            <param name="dueno"> dueño del tablero </param>
        </member>
        <member name="M:ClassLibrary.Tablero.AgregarBarco(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Metodo Utilizado por el tablero para añadir un barco.
            </summary>
            <param name="filaInicio"></param>
            <param name="columnaInicio"></param>
            <param name="filaFinal"></param>
            <param name="columnaFinal"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Tablero.Atacar(System.Int32,System.Int32)">
            <summary>
            Metodo el cual se ejecuta para cambiar un punto de la matriz.
            </summary>
            <param name="fila"></param>
            <param name="columna"></param>
        </member>
        <member name="M:ClassLibrary.Tablero.barcoHundido(System.Collections.Generic.List{System.Int32[]},ClassLibrary.Barco)">
            <summary>
            Metodo encargado de hacer lo necesario cuando un barco es hundido
            </summary>
            <param name="partesDeBarcoACambiar"></param>
            <param name="barcoEliminado"></param>
        </member>
        <member name="M:ClassLibrary.Tablero.TerminoTablero">
            <summary>
            Metodo encargado de ver si la partida a terminado y cambiar el atributo de terminado a true.
            </summary>
        </member>
        <member name="M:ClassLibrary.Tablero.VerCasilla(System.Int32,System.Int32)">
            <summary>
            Metodo utilizado por logica para ver la casilla donde se esta atacando
            </summary>
            <param name="columna"></param>
            <param name="fila"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Tablero.VerTablero">
            <summary>
            Metodo encargado de retornar una copia de la matriz para luego ser impresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Tablero.Victoria">
            <summary>
            Metodo utilizado internamente por la clase tablero
            para asignar el int del dueño al ganador en caso 
            de que este sea el ganador
            </summary>
        </member>
        <member name="T:JugadorNoEncontradoException">
            <summary>
            Excepcion por si un jugador no se encuentra.
            </summary>
        </member>
        <member name="P:JugadorNoEncontradoException.NumeroDeJugador">
            <summary>
            numero del jugador no encontrado
            </summary>
        </member>
        <member name="M:JugadorNoEncontradoException.#ctor">
            <summary>
            Constructor default
            </summary>
        </member>
        <member name="M:JugadorNoEncontradoException.#ctor(System.String)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:JugadorNoEncontradoException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:JugadorNoEncontradoException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor adicional para asignar numero de jugador no encontrado al atributo
            y para conseguir el mensaje a mostrar de ser necesario.
            </summary>
            <param name="message"> mensaje a mostrar </param>
            <param name="numerodejugador"> numero del jugador no encontrado </param>
            <returns></returns>
        </member>
        <member name="T:ModoInvalidoException">
            <summary>
            Excepcion por si un modo ingresado es invalido
            </summary>
        </member>
        <member name="P:ModoInvalidoException.Modo">
            <summary>
            modo invalido
            </summary>
        </member>
        <member name="M:ModoInvalidoException.#ctor">
            <summary>
            Constructor default
            </summary>
        </member>
        <member name="M:ModoInvalidoException.#ctor(System.String)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ModoInvalidoException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:ModoInvalidoException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor adicional para asignar el modo invalido al atributo
            y para conseguir el mensaje a mostrar de ser necesario.
            </summary>
            <param name="message"> mensaje a mostrar </param>
            <param name="modo"> numero del jugador no encontrado </param>
            <returns></returns>
        </member>
        <member name="T:TableroInvalidoException">
            <summary>
            Excepcion por si un tablero es invalido
            </summary>
        </member>
        <member name="P:TableroInvalidoException.Tamano">
            <summary>
            Tablero invalido
            </summary>
        </member>
        <member name="M:TableroInvalidoException.#ctor">
            <summary>
            Constructor default
            </summary>
        </member>
        <member name="M:TableroInvalidoException.#ctor(System.String)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TableroInvalidoException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor default
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:TableroInvalidoException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor adicional para asignar el tablero invalido al atributo
            y para conseguir el mensaje a mostrar de ser necesario.
            </summary>
            <param name="message"> mensaje a mostrar </param>
            <param name="tamano"> numero del jugador no encontrado </param>
            <returns></returns>
        </member>
    </members>
</doc>
